---
import Layout from '../layouts/Layout.astro';
---

<Layout title="お問い合わせ - BAYFRONT" lang="ja">
  <section class="pt-20 pb-12">
    <div class="container mx-auto px-8">
      <h1 class="text-4xl md:text-6xl text-white font-light tracking-wider mb-8">お問い合わせ</h1>
    </div>
  </section>

  <section class="pb-24 bg-primary">
    <div class="container mx-auto px-8">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-12">
        <div>
          <form id="contactForm" class="space-y-4">
            <div class="grid grid-cols-2 gap-6">
              <div>
                <label for="name" class="block text-white mb-1">お名前</label>
                <input type="text" id="name" name="name" class="w-full px-4 py-2 bg-transparent border-b border-white/30 text-white focus:outline-none focus:border-accent transition-colors" required>
              </div>
              <div>
                <label for="email" class="block text-white mb-1">メールアドレス</label>
                <input type="email" id="email" name="email" class="w-full px-4 py-2 bg-transparent border-b border-white/30 text-white focus:outline-none focus:border-accent transition-colors" required>
              </div>
            </div>
            <div>
              <label for="phone" class="block text-white mb-1">電話番号</label>
              <input type="tel" id="phone" name="phone" class="w-full px-4 py-2 bg-transparent border-b border-white/30 text-white focus:outline-none focus:border-accent transition-colors">
            </div>
            <div>
              <label for="message" class="block text-white mb-1">お問い合わせ内容</label>
              <textarea id="message" name="message" rows="2" class="w-full px-4 py-2 bg-transparent border-b border-white/30 text-white focus:outline-none focus:border-accent transition-colors resize-none" required></textarea>
            </div>
            <button type="submit" class="w-full py-2 bg-accent text-white font-light tracking-wider hover:bg-accent/80 transition-colors relative">
              <span class="submit-text">送信する</span>
              <span class="loading-text hidden">
                送信中...
              </span>
            </button>
            <div id="successMessage" class="hidden text-green-400 text-center mt-4">
              メッセージが送信されました。ありがとうございます。
            </div>
            <div id="errorMessage" class="hidden text-red-400 text-center mt-4">
              エラーが発生しました。もう一度お試しください。
            </div>
          </form>
        </div>

        <div>
          <iframe 
            src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3281.3767172579527!2d135.4993!3d34.6759!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x6000e737837da92b%3A0x3e464c6b8d48dd21!2z44K144Oz44Op44Kk44K66ZW35aCA!5e0!3m2!1sja!2sjp!4v1707799611799!5m2!1sja!2sjp" 
            width="100%" 
            height="100%" 
            style="border:0;" 
            allowfullscreen="" 
            loading="lazy" 
            referrerpolicy="no-referrer-when-downgrade"
            class="w-full h-[400px]"
          ></iframe>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  const form = document.getElementById('contactForm') as HTMLFormElement;
  const submitText = form.querySelector('.submit-text') as HTMLElement;
  const loadingText = form.querySelector('.loading-text') as HTMLElement;
  const successMessage = document.getElementById('successMessage') as HTMLElement;
  const errorMessage = document.getElementById('errorMessage') as HTMLElement;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Reset messages
    successMessage.classList.add('hidden');
    errorMessage.classList.add('hidden');

    // Show loading state
    submitText.classList.add('hidden');
    loadingText.classList.remove('hidden');

    // Get form data
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    try {
      // Use the full URL in development, relative path in production
      const apiUrl = import.meta.env.DEV 
        ? `${window.location.origin}/api/send-email`
        : '/api/send-email';

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (response.ok) {
        // Show success message
        successMessage.classList.remove('hidden');
        form.reset();
      } else {
        // Show error message
        errorMessage.classList.remove('hidden');
        console.error('Error:', result.error);
      }
    } catch (error) {
      // Show error message
      errorMessage.classList.remove('hidden');
      console.error('Error:', error);
    } finally {
      // Reset button state
      submitText.classList.remove('hidden');
      loadingText.classList.add('hidden');
    }
  });
</script> 